package com.android.shadow.views.videoRecording;

import android.graphics.Bitmap;
import android.media.ThumbnailUtils;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;
import android.widget.VideoView;

import com.android.shadow.R;
import com.android.shadow.ShadowApp;
import com.android.shadow.api.GetRestAdapter;
import com.android.shadow.model.output.SearchSimpleResponse;
import com.android.shadow.model.output.UploadVideoResponse;
import com.android.shadow.utils.FileUtils;
import com.android.shadow.utils.PreferenceKeys;
import com.android.shadow.utils.SharedPrefsHelper;
import com.android.shadow.utils.Utilities;
import com.android.shadow.views.core.BaseActivity;
import com.github.hiteshsondhi88.libffmpeg.ExecuteBinaryResponseHandler;
import com.github.hiteshsondhi88.libffmpeg.FFmpeg;
import com.github.hiteshsondhi88.libffmpeg.LoadBinaryResponseHandler;
import com.github.hiteshsondhi88.libffmpeg.exceptions.FFmpegCommandAlreadyRunningException;
import com.github.hiteshsondhi88.libffmpeg.exceptions.FFmpegNotSupportedException;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class RecordedVideoPlayActivity extends BaseActivity implements View.OnClickListener {

    private Button btnPause, btnUpload, btnCancel;
    private VideoView videoPlayer;
    private FFmpeg ffmpeg;
    @Override
    protected int getLayoutId() {
        return R.layout.activity_recorded_video_play;
    }

    @Override
    protected void initViews() {
        btnPause = (Button) findViewById(R.id.btn_pause);
        btnUpload = (Button) findViewById(R.id.btn_upload);
        btnCancel = (Button) findViewById(R.id.cancel_btn);
        videoPlayer = (VideoView) findViewById(R.id.videoview);
        btnPause.setOnClickListener(this);
        btnUpload.setOnClickListener(this);
        btnCancel.setOnClickListener(this);

        ffmpeg = FFmpeg.getInstance(this);
        loadFFMpegBinary();
    }

    @Override
    public void dispose() {
        ShadowApp.recordedVideoPath = null;
        //  deleteNeglactedVideo();
        finish();
    }

    int stopPosition = 0;

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.btn_pause:

                if (videoPlayer.isPlaying()) {
                    videoPlayer.pause();
                    stopPosition = videoPlayer.getCurrentPosition();
                } else {
                    if (stopPosition != 0) {
                        videoPlayer.seekTo(stopPosition);
                        videoPlayer.start();
                        stopPosition = 0;
                    } else {
                        videoPlayer.setVideoPath(ShadowApp.recordedVideoPath);
                        videoPlayer.start();
                        stopPosition = 0;
                    }
                }
                break;

            case R.id.btn_upload:
                trasnposeVideo();


                break;

            case R.id.cancel_btn:
                ShadowApp.recordedVideoPath = "";
                finish();
                break;
            default:
                break;
        }
    }

    private void uploadVideoApi() {

        SharedPrefsHelper sharedPrefsHelper = new SharedPrefsHelper(this);
        String userId = sharedPrefsHelper.get(PreferenceKeys.PREF_USER_ID);
        RequestBody description = RequestBody.create(MultipartBody.FORM, userId);

        File videoFile = new File(ShadowApp.recordedVideoPath);
        RequestBody videoRequestBody = RequestBody.create(MediaType.parse("video/mp4"), videoFile);
        MultipartBody.Part videoFilePart = MultipartBody.Part.createFormData("video", videoFile.getName(), videoRequestBody);
        Call<UploadVideoResponse> response = GetRestAdapter.getRestAdapter(true).uploadVideo(description, videoFilePart);
        response.enqueue(new Callback<UploadVideoResponse>() {
            @Override
            public void onResponse(Call<UploadVideoResponse> call, Response<UploadVideoResponse> response) {
                hideDialog();
                if (response != null && response.body() != null) {
                    showToast(response.body().getMessage());
                    finish();
                } else {
                    showToast(R.string.server_error_msg);
                }
            }

            @Override
            public void onFailure(Call<UploadVideoResponse> call, Throwable t) {
                hideDialog();
                showToast(t.getMessage());
            }
        });

    }

    public void deleteNeglactedVideo() {
        File file = new File(ShadowApp.recordedVideoPath);
        boolean deleted = file.delete();
        ShadowApp.recordedVideoPath = "";
    }

    @Override
    protected void onResume() {
        super.onResume();
        videoPlayer.setVideoPath(ShadowApp.recordedVideoPath);
        videoPlayer.start();
    }
    private void trasnposeVideo() {

        videoPlayer.pause();
        showDialog();
        String outputPath = FileUtils.createDirInSdCard("rotated_" + System.currentTimeMillis());
        String cmd = "-y -i " +  ShadowApp.recordedVideoPath + " -metadata:s:v:0 rotate=90 -preset ultrafast " + outputPath;
        // String cmd = "-y -i " + TTApplication.recordedVideoPath + " -vf transpose=1 -preset ultrafast " + outputPath;//
        String[] command = cmd.split(" ");
        if (command.length != 0) {
            execFFmpegBinary(command, outputPath);
        } else {
            Toast.makeText(RecordedVideoPlayActivity.this, "", Toast.LENGTH_LONG).show();
            if (!Utilities.checkInternet(this)) {
                showToast(R.string.no_internet_msg);
            } else {
                uploadVideoApi();
            }
        }
    }
    private void execFFmpegBinary(final String[] command, final String outputPath) {
        try {
            ffmpeg.execute(command, new ExecuteBinaryResponseHandler() {
                @Override
                public void onFailure(String s) {
                    //addTextViewToLayout("FAILED with output : " + s);
                    //  uploadVideo();// uploadToS3();//
                }

                @Override
                public void onSuccess(String s) {
                    //addTextViewToLayout("SUCCESS with output : " + s);
                    ShadowApp.recordedVideoPath = outputPath;
                    if (!Utilities.checkInternet(RecordedVideoPlayActivity.this)) {
                        showToast(R.string.no_internet_msg);
                    } else {
                        uploadVideoApi();
                    }
                }

                @Override
                public void onProgress(String s) {
                    Log.d("CameraUploadActivity", "Started command : ffmpeg " + command);
                    //addTextViewToLayout("progress : " + s);
                    //progressDialog.setMessage("Processing\n" + s);
                }

                @Override
                public void onStart() {
                    //outputLayout.removeAllViews();

                    Log.d("CameraUploadActivity", "Started command : ffmpeg " + command);
                    //progressDialog.setMessage("Processing...");
                    //progressDialog.show();
                }

                @Override
                public void onFinish() {
                    Log.d("", "Finished command : ffmpeg " + command);
                    //progressDialog.dismiss();
                }
            });
        } catch (FFmpegCommandAlreadyRunningException e) {
            // do nothing for now
            //  uploadVideo();// uploadToS3();//
        }
    }

    private void loadFFMpegBinary() {
        try {
            ffmpeg.loadBinary(new LoadBinaryResponseHandler() {
                @Override
                public void onFailure() {
                    //showUnsupportedExc    `eptionDialog();
                    Log.d("loadFFMpegBinary", "-----UNABLE TO LOAD BINARY FILES-------");
                }
            });
        } catch (FFmpegNotSupportedException e) {
            //showUnsupportedExceptionDialog();
            e.printStackTrace();
        }
    }
}